//@version=5
strategy(title='SAIYAN OCC Strategy R5.41', overlay=true, pyramiding=0, default_qty_type=strategy.percent_of_equity, default_qty_value=10, calc_on_every_tick=false)

// === INPUTS ===
res = input.timeframe(title='TIMEFRAME', defval='15', group="NON REPAINT")
useRes = input(defval=true, title='Use Alternate Signals')
intRes = input(defval=8, title='Multiplier for Alternate Signals')
stratRes = timeframe.ismonthly ? str.tostring(timeframe.multiplier * intRes, '###M') : 
          timeframe.isweekly ? str.tostring(timeframe.multiplier * intRes, '###W') : 
          timeframe.isdaily ? str.tostring(timeframe.multiplier * intRes, '###D') : 
          timeframe.isintraday ? str.tostring(timeframe.multiplier * intRes, '####') : '60'

// MA Type Selection
basisType = input.string(defval='ALMA', title='MA Type', options=['TEMA', 'HullMA', 'ALMA'])
basisLen = input.int(defval=2, title='MA Period', minval=1)
offsetSigma = input.float(defval=5.0, title='Offset for LSMA / Sigma for ALMA', minval=0.0)
offsetALMA = input.float(defval=0.85, title='Offset for ALMA', minval=0.0, step=0.01)
scolor = input(true, title='Show colored Bars to indicate Trend?')
delayOffset = input.int(defval=0, title='Delay Open/Close MA (Forces Non-Repainting)', minval=0, step=1)
tradeType = input.string('BOTH', title='Trade Direction', options=['LONG', 'SHORT', 'BOTH', 'NONE'])

// Heikin Ashi Option
h = input(false, title='Use Heikin Ashi Candles')
src = h ? request.security(ticker.heikinashi(syminfo.tickerid), timeframe.period, close, lookahead=barmerge.lookahead_off) : close

// Supply/Demand Settings
swing_length = input.int(10, title='Swing High/Low Length', group='Settings', minval=1, maxval=50)
history_of_demand_to_keep = input.int(20, title='History To Keep', minval=5, maxval=50)
box_width = input.float(2.5, title='Supply/Demand Box Width', group='Settings', minval=1, maxval=10, step=0.5)

// Visual Settings
show_zigzag = input.bool(false, title='Show Zig Zag', group='Visual Settings')
show_price_action_labels = input.bool(false, title='Show Price Action Labels', group='Visual Settings')

// Colors
supply_color = input.color(color.new(#EDEDED, 70), title='Supply', group='Visual Settings')
supply_outline_color = input.color(color.new(color.white, 75), title='Supply Outline', group='Visual Settings')
demand_color = input.color(color.new(#00FFFF, 70), title='Demand', group='Visual Settings')
demand_outline_color = input.color(color.new(color.white, 75), title='Demand Outline', group='Visual Settings')
bos_label_color = input.color(color.white, title='BOS Label', group='Visual Settings')
poi_label_color = input.color(color.white, title='POI Label', group='Visual Settings')
swing_type_color = input.color(color.black, title='Price Action Label', group='Visual Settings')
zigzag_color = input.color(color.new(#000000, 0), title='Zig Zag', group='Visual Settings')

// Strategy Settings
slPoints = input.int(defval=0, title='Initial Stop Loss Points (0 to disable)', minval=0)
tpPoints = input.int(defval=0, title='Initial Take Profit Points (0 to disable)', minval=0)
max_bars_back = input.int(defval=4000, title='Number of Bars for Back Testing', minval=0)

// Alert Messages
i_alert_txt_entry_long = input.text_area(defval="", title="Long Entry Message", group="Alerts")
i_alert_txt_entry_short = input.text_area(defval="", title="Short Entry Message", group="Alerts")

// === FUNCTIONS ===
// Moving Average Variant Function
variant(type, src, len, offSig, offALMA) =>
    float result = 0.0
    if type == 'EMA'
        result := ta.ema(src, len)
    else if type == 'TEMA'
        ema1 = ta.ema(src, len)
        ema2 = ta.ema(ema1, len)
        ema3 = ta.ema(ema2, len)
        result := 3 * (ema1 - ema2) + ema3
    else if type == 'HullMA'
        result := ta.wma(2 * ta.wma(src, len / 2) - ta.wma(src, len), math.round(math.sqrt(len)))
    else if type == 'ALMA'
        result := ta.alma(src, len, offALMA, offSig)
    else
        result := ta.sma(src, len)
    result

// Security wrapper with non-repainting
securityNoRep(sym, res, src) =>
    request.security(sym, res, src, barmerge.gaps_off, barmerge.lookahead_off)

// === CALCULATIONS ===
closeSeries = variant(basisType, close[delayOffset], basisLen, offsetSigma, offsetALMA)
openSeries = variant(basisType, open[delayOffset], basisLen, offsetSigma, offsetALMA)

// Get alternate resolution if selected
closeSeriesAlt = useRes ? request.security(syminfo.tickerid, stratRes, closeSeries, barmerge.gaps_off, barmerge.lookahead_off) : closeSeries
openSeriesAlt = useRes ? request.security(syminfo.tickerid, stratRes, openSeries, barmerge.gaps_off, barmerge.lookahead_off) : openSeries

// Entry conditions
buy = ta.crossover(closeSeriesAlt, openSeriesAlt) and (tradeType == 'LONG' or tradeType == 'BOTH')
sell = ta.crossunder(closeSeriesAlt, openSeriesAlt) and (tradeType == 'SHORT' or tradeType == 'BOTH')

// Plot signals
plotshape(buy, title="Buy", text="Buy", style=shape.labelup, location=location.belowbar, color=#00DBFF, textcolor=color.white, size=size.tiny)
plotshape(sell, title="Sell", text="Sell", style=shape.labeldown, location=location.abovebar, color=#E91E63, textcolor=color.white, size=size.tiny)

// Strategy orders
if buy
    strategy.entry("Long", strategy.long, alert_message=i_alert_txt_entry_long)
    if tpPoints > 0
        strategy.exit("TP Long", "Long", limit=close + tpPoints, stop=slPoints > 0 ? close - slPoints : na)

if sell
    strategy.entry("Short", strategy.short, alert_message=i_alert_txt_entry_short)
    if tpPoints > 0
        strategy.exit("TP Short", "Short", limit=close - tpPoints, stop=slPoints > 0 ? close + slPoints : na)